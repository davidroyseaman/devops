apiVersion: apps/v1
kind: Deployment
metadata:
  name: eg-rest-server-deployment
  labels:
    app: eg-rest-server
spec:
  selector:
    matchLabels:
      app: eg-rest-server
  replicas: 1
  template:
    metadata:
      labels:
        app: eg-rest-server
    spec:
      containers:
      - name: eg-rest-server # ???
        image: "replaced by build"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
      # imagePullSecrets:
      # - name: ghcr-docker
---
apiVersion: v1
kind: Service
metadata:
  name: eg-rest-server-service
spec:
  # type: NodePort
  selector:
    app: eg-rest-server
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      targetPort: 8080
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      # nodePort: 30007
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: eg-rest-server-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # dsx investigate: It seems the self check was failing because requesting
    # http:// was upgraded to https:// and had no certificate yet.
    # that auto upgrade is good, but try find out what's causing it
    cert-manager.io/issue-temporary-certificate: "true"
    # dsx lets just try everything (https://cert-manager.io/docs/faq/acme/)
    acme.cert-manager.io/http01-edit-in-place: "true"
spec:
  tls:
  - hosts:
    - rest.k8s.zk.io
    secretName: eg-rest-server-tls-secret
  ingressClassName: nginx
  rules:
  - host: rest.k8s.zk.io
    http:
      paths:
      - path: "/"
        pathType: Prefix
        backend:
          service:
            name: eg-rest-server-service
            port:
              number: 80
