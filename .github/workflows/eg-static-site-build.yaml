#https://github.com/actions/starter-workflows/blob/master/ci/docker-publish.yml

name: eg-static-site-docker

on:
  workflow_dispatch:
  push:
    # # Publish `$default-branch` as Docker `latest` image.
    # branches:
    #   - $default-branch

    # # Publish `v1.2.3` tags as releases.
    # tags:
    #   - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: eg-static-site
  KUBECONFIG: kube_config.yaml

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    # if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      - uses: chrisdickinson/setup-yq@latest

      - name: Print default branch
        run: echo "$default-branch"

      - name: Build image
        working-directory: eg-static-site
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        # run: |
        #   IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

        #   # Change all uppercase to lowercase
        #   IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        #   # Strip git ref prefix from version
        #   VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        #   # Strip "v" prefix from tag name
        #   [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        #   # Use Docker `latest` tag convention
        #   [ "$VERSION" == "master" ] && VERSION=latest
        #   echo IMAGE_ID=$IMAGE_ID
        #   echo VERSION=$VERSION
        #   docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        #   docker push $IMAGE_ID:$VERSION
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          IMAGE_TAG=${{ github.sha }}
          echo IMAGE_ID=$IMAGE_ID
          echo IMAGE_TAG=$IMAGE_TAG
          docker tag $IMAGE_NAME $IMAGE_ID:$IMAGE_TAG
          docker push $IMAGE_ID:$IMAGE_TAG

      - name: Store kubeconfig for kubectl
        working-directory: eg-static-site
        run: 'echo "$KUBE_CONFIG" > kube_config.yaml'
        shell: bash
        env:
          KUBE_CONFIG: ${{secrets.KUBE_CONFIG}}

      - name: Create k8s imagePullSecrets
        working-directory: eg-static-site
        # --docker-email=dsx@whatdo.dsx
        run: |
          kubectl create secret docker-registry ghcr-docker \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --dry-run=true -o yaml \
          | kubectl apply -f -

      # - name: apply deployment to k8s
      #   working-directory: eg-static-site
      #   run: 'kubectl apply -f deployment.k8s.yaml'

      - name: apply deployment to k8s
        working-directory: eg-static-site
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          IMAGE_TAG=${{ github.sha }}
          
          yq w deployment.k8s.yaml "spec.template.spec.containers[0].image" $IMAGE_ID:$IMAGE_TAG
          yq w deployment.k8s.yaml "spec.template.spec.containers[0].image" $IMAGE_ID:$IMAGE_TAG \
          | kubectl apply -f -
          


